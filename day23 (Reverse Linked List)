//206. Reverse Linked List
//Given the head of a singly linked list, reverse the list, and return the reversed list.

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var reverseList = function (head) {
  //Initialize two pointers
  //set current node to head to start with
  let cur = head
  //set prev to null to start with
  let prev = null
  ///loop through until cur is null = falsey value
  while (cur) {
    //temporarily store the next node in the original list
    let holdN = cur.next
    //make pointer direction to prev (reverse)
    cur.next = prev
    //update prev to current node
    prev = cur
    //update current to next stored in holdN
    cur = holdN
  }
  return prev
}
