//19. Remove Nth Node From End of List
// Given the head of a linked list, remove the nth node from the end of the list and return its head.

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} n
 * @return {ListNode}
 */
var removeNthFromEnd = function (head, n) {
  //create dummy node
  const dummy = new ListNode()
  //create pointer
  dummy.next = head
  //2x pointers start from the same position
  let slow = dummy
  let fast = dummy
  //loop through to position the fast pointer
  for (let i = 1; i <= n + 1; i++) {
    fast = fast.next
    //2x pointers moves until the fast pointer point at null
  }
  while (fast !== null) {
    slow = slow.next
    fast = fast.next
  }
  //delete the next node ( = nth from the back)
  slow.next = slow.next.next

  return dummy.next
}
