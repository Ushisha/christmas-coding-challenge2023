//204. Count Primes
//Given an integer n, return the number of prime numbers that are strictly less than n.

/**
 * @param {number} n
 * @return {number}
 */
var countPrimes = function (n) {
  //Create an array to store whether each number is prime or not
  let primes = new Array(n)
  //Itnitialize all values in the array to true
  for (let i = 0; i < primes.length; i++) {
    primes[i] = true
  }
  //Iterate through the array using the Sieve of Eratosthenes algorithm
  for (let i = 2; i * i < primes.length; i++) {
    if (primes[i]) {
      //Mark multiples of the current prime as not prime
      for (let j = i; j * i < primes.length; j++) {
        primes[i * j] = false
      }
    }
  }
  //Count the number of true values in the array, which corresponds to prim numbers
  let primeCount = 0
  for (let i = 2; i < primes.length; i++) {
    if (primes[i]) {
      primeCount++
    }
  }
  //Return the count of prime numbers less than n
  return primeCount
}

//A prime number is a whole number greater than 1 whose only factors are 1 and itself. A factor is a whole number that can be divided evenly into another number. The first few prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23 and 29. Numbers that have more than two factors are called composite numbers.

//Sieve of Eratosthenes
//a well-known algorithm for finding all prime numbers up to a given limit.
